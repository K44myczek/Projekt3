using System;
using System.Numerics;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp24
{
    class Program
    {
        private void rekurencyjny(int[] tab, int left, int right) //metoda sortujaca quicksort rekurencyjnie
        {
            int i, j, x;
            i = left;
            j = right;
            x = tab[(left + right) / 2];

            do
            {
                while (tab[i] < x) i++;
                while (x < tab[j]) j--;
                if (i <= j)
                {
                    int buf = tab[i];
                    tab[i] = tab[j];
                    tab[j] = buf;
                    i++;
                    j--;
                }
            } while (i <= j);

            if (left < j) rekurencyjny(tab, left, j);
            if (i < right) rekurencyjny(tab, i, right);
        }





        public static int[] iteracyjny(int[] t)//metoda sortujaca quicksort iteracyjnie
        {
            int i, j, l, p, sp;
            int[] stos_l = new int[t.Length],
                stos_p = new int[t.Length];
            sp = 0;
            stos_l[sp] = 0;
            stos_p[sp] = t.Length - 1;

            do
            {
                l = stos_l[sp];
                p = stos_p[sp];
                sp--;

                do
                {
                    int x;
                    i = l;
                    j = p;
                    x = t[(l + p) / 2];
                    do
                    {
                        while (t[i] < x) i++;
                        while (x < t[j]) j--;
                        if (i <= j)
                        {
                            int buf = t[i];
                            t[i] = t[j];
                            t[j] = buf;
                            i++;
                            j--;
                        }
                    } while (i <= j);

                    if (i < p)
                    {
                        sp++;
                        stos_l[sp] = i;
                        stos_p[sp] = p;
                    }
                    p = j;
                } while (l < p);
            } while (sp >= 0);
            return t;

        }
        static public int[] losowa(int[] tab)
        {
            for (int i = 0; i < tab.Length; i++)
            {
                Random rand = new Random();
                tab[i] = rand.Next(50000, 200000);

            }
            return tab;

        }
        static void Main(string[] args)
        {
            Console.WriteLine("rozmiar\titeracyjny\trekurencyjny");
            Stopwatch stopwatch = new Stopwatch();
            int lp = 1;
            for (int i = 50000; i <= 200000; i += 10000)
            {

                int[] tab = new int[i];
                losowa(tab);//zwracanie tablicy losowej
                int[] tab2 = tab;//powielenie tablicy by wartosci wylosowane dla obu pomiarow byly takie same
                stopwatch.Start();//stoper start
                iteracyjny(tab);//zaimplementowana tablica do metody
                stopwatch.Stop();//stoper stop
                Console.Write(tab.Length + "\t" + stopwatch.Elapsed.TotalSeconds.ToString("F8"));
                stopwatch.Reset();//reset pomiaru
                
                stopwatch.Start();//stoper start
                iteracyjny(tab2);//zaimplementowana tablica do metody
                stopwatch.Stop();//stoper stop
                Console.Write("\t" + stopwatch.Elapsed.TotalSeconds.ToString("F8"));
                stopwatch.Reset();//reset pomiaru
                Console.Write("\n");
            }


        }
    }
}

